---
title: 设计模式
author: not_you
date: 2022-04-07 00:00:00 +0800
categories: ["系统学习"]
tags: [设计模式]
---



### git链接

[我的设计模式学习记录，包含代码和详细的注释](https://github.com/hubing1791/my_leetcode)

面试被问到设计模式被问住了，痛定思痛。系统的彻底学一下

TvT，小吐槽，还是逃不掉java啊

### 单例设计模式：

定义：保证一个类只有一个实例，并提供一个全局访问点

场景：重量级对象，不需要多个实例，如线程池，数据库连接池

具体实现：

- 懒汉模式：延迟加载，只有在真正使用的时候，才开始实例化。

  1）线程安全问题

  2）double check 加锁优化

  3）编译器（JIT），CPU有可能对指令进行重排序，导致使用到尚未初始化额实例，可以通过添加volatile关键字进行修饰，对于volatile修饰的字段，可以防止指令重排。

- 饿汉模式：类加载的初始化阶段就完成了实例的初始化。本质上就是借助于jvm类加载机制，保证实例的唯一性。

  类加载过程：

  1.加载二进制数据到内存中，生成对应的Class数据结构

  2.连接：a.验证，b.准备（给类的静态成员赋默认值），c.解析

  3.初始化：给类的静态变量赋初值

  只有在真正使用对应的类时，才会触发初始化。

- 静态内部类：

  1.本质上时利用类的加载机制来保证线程安全

  2.只有在实际使用的时候，才会触发类的初始化，所以也是一种懒加载

- enum：

  1.还是借用了jvm的机制，可以抵抗反射，并且也是线程安全的

相关问题：

- 反射攻击：静态内部类和饿汉模式可以通过在构造器里加判断防御，但是懒汉模式不行

