---
title: 设计模式
author: not_you
date: 2022-04-07 00:00:00 +0800
categories: ["系统学习"]
tags: [设计模式]
---



### git链接

[我的设计模式学习记录，包含代码和详细的注释](https://github.com/hubing1791/my_leetcode)

面试被问到设计模式被问住了，痛定思痛。系统的彻底学一下

TvT，小吐槽，还是逃不掉java啊

### 单例设计模式：

定义：保证一个类只有一个实例，并提供一个全局访问点

场景：重量级对象，不需要多个实例，如线程池，数据库连接池

具体实现：

#### 懒汉模式：

延迟加载，只有在真正使用的时候，才开始实例化。

1）线程安全问题

2）double check 加锁优化

3）编译器（JIT），CPU有可能对指令进行重排序，导致使用到尚未初始化额实例，可以通过添加volatile关键字进行修饰，对于volatile修饰的字段，可以防止指令重排。

#### 饿汉模式：

类加载的初始化阶段就完成了实例的初始化。本质上就是借助于jvm类加载机制，保证实例的唯一性。

类加载过程：

1.加载二进制数据到内存中，生成对应的Class数据结构

2.连接：a.验证，b.准备（给类的静态成员赋默认值），c.解析

3.初始化：给类的静态变量赋初值

只有在真正使用对应的类时，才会触发初始化。

#### 静态内部类：

1.本质上时利用类的加载机制来保证线程安全

2.只有在实际使用的时候，才会触发类的初始化，所以也是一种懒加载

#### enum：

1.还是借用了jvm的机制，可以抵抗反射，并且也是线程安全的

相关问题：

- 反射攻击：静态内部类和饿汉模式可以通过在构造器里加判断防御，但是懒汉模式不行
- 反序列化攻击：object readReslove() throws ObjectStreamException 可解，需要定义版本号



### 工厂方法模式

定义：定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。

场景：需要生成复杂对象的地方，都可以尝试考虑使用工厂模式来代替。当你不知道使用对象的确切类型；当你希望为库或框架提供拓展其内部组件的方法时

#### 简单工厂：

在简单工厂模式中创建实例的方法通常为静态（static）方法，因此简单工厂模式（Simple Factory Pattern）又叫作静态工厂方法模式（Static Factory Method Pattern）。简单来说，简单工厂模式有一个具体的工厂类，可以生成多个不同的产品，属于创建型设计模式。**简单工厂模式不在 GoF 23 种设计模式之列。**

1.单工厂模式每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度，**违背了“开闭原则”**。

#### 工厂方法模式：

工厂方法模式由抽象工厂、具体工厂、抽象产品和具体产品等4个要素构成。每个具体工厂有对应的具体产品

1.优点：

- 用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程。

- 灵活性比简单工厂强，对于新产品的创建，只需多写一个相应的工厂类。
- 典型的解耦框架。高层模块只需要知道产品的抽象类，无须关心其他实现类，满足迪米特法则、依赖倒置原则和里氏替换原则。

2.缺点：

- 类的个数容易过多，增加复杂度
- 增加了系统的抽象性和理解难度
- 抽象产品只能生产一种产品

#### 抽象工厂：

是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。

1.应用场景：

- 系统中有多个产品族，每个具体工厂创建同一族但属于不同等级结构的产品
- 系统一次只可能消费其中某一族产品，即同族的产品一起使用

2.优点：

- 可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。
- 当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品组。
- 抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。

3.缺点：

- 当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。



### 参考

[Java设计模式：23种设计模式全面解析（超级详细）](http://c.biancheng.net/design_pattern/)

[Head First 设计模式（中文版）](https://book.douban.com/subject/2243615/)

