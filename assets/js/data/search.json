[ { "title": "开发环境完整布置", "url": "/posts/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%8C%E6%95%B4%E5%B8%83%E7%BD%AE/", "categories": "具体需求", "tags": "具体需求, 杂", "date": "2023-07-20 00:00:00 +0800", "snippet": "清空了PC，并且决定以后平时写代码用自己的云服务器。记录一下一些小tips（1）PC配置git，ssh等git安装注意不要安装github desktop，不好用。安装git for windows安装后建议配一下git alias# 我常用的alias[alias] gco = git checkout gst = git status ga = git add gcm = git commit -m gb = git branch以及可以配下~/.ssh/config，这样就可以用ssh aaa登录远程服务Host..." }, { "title": "运维相关知识学习", "url": "/posts/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/", "categories": "日常学习, 运维", "tags": "运维", "date": "2023-04-25 00:00:00 +0800", "snippet": "运维相关的知识了解的并不是很多，读一些材料进行的学习，记录一下。读的主要是gitchat的材料深入了解Azure云平台容器技术服务" }, { "title": "金融领域概念", "url": "/posts/%E9%87%91%E8%9E%8D%E9%A2%86%E5%9F%9F%E6%A6%82%E5%BF%B5/", "categories": "日常学习, 量化", "tags": "量化", "date": "2023-03-07 00:00:00 +0800", "snippet": "因为一些实际的需要，需要了解金融领域的概念，记录一下方便自己之后查看。CTACommodity Trading AdvisorOTC在金融领域，OTC是“场外交易“（Over-The-Counter）的缩写。OTC指的是在非交易所场所进行的金融资产交易。与交易所交易不同，OTC交易是直接通过买方和卖方之间的交流进行的。这意味着交易双方可以自行协商价格、数量和其他交易条件，而不需要依赖于标准化的交易所规则。OTC市场通常包括外汇、股票、债券、商品等金融资产的交易。这些交易可以在电子平台上进行，也可以通过电话或其他方式完成。OTC交易的特点包括更大的灵活性、更高的流动性和更少的监管限制。然而..." }, { "title": "交易系统设计", "url": "/posts/%E5%BD%93%E4%BB%A3%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/", "categories": "日常学习, 量化", "tags": "量化, 当代量化交易系统", "date": "2022-09-01 00:00:00 +0800", "snippet": "记录一下课程的理解和随想第三课这堂课是宽邦科技创始人讲的" }, { "title": "python的相关学习-数据分析相关", "url": "/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9A%84%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/", "categories": "日常学习, python", "tags": "python", "date": "2022-08-04 00:00:00 +0800", "snippet": "代码位置稀疏df首先判断df是否全部为0或者NaN，再找出有意义的值使用字典映射一个列 使用字典映射一个列 rename df.query使用使用python与shell进行交互使用pool并发执行函数画图" }, { "title": "python的相关学习-数据分析相关", "url": "/posts/shell%E7%9A%84%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/", "categories": "日常学习, python", "tags": "python", "date": "2022-08-04 00:00:00 +0800", "snippet": "代码位置根据命令信息继续运行命令假设先docker ps，要将其中异常退出的容器全部重启，使用一行shell实现2.实现一个shell脚本，获取五个规定参数以及最后的不定参数使用-？这种写法缺省报错" }, { "title": "go的相关学习-goroutine相关", "url": "/posts/go%E7%9A%84%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0-goroutine%E7%9B%B8%E5%85%B3-profile/", "categories": "日常学习, go", "tags": "go", "date": "2022-08-04 00:00:00 +0800", "snippet": "sync包官方链接 WaitGroup在需要多个任务同步的情况下，synct提供了WaitGroup。官方文档里的说明就已经足够清晰了，本质上就是信号量机制。值得一提的是，如果waitgroup结构体内部记录的数变为负值，将会触发panic。官方的使用代码示例如下import ( &quot;sync&quot;)type httpPkg struct{}func (httpPkg) Get(url string) {}var http httpPkgfunc main() { var wg sync.WaitGroup var urls = []string{ &quot;http:..." }, { "title": "交易系统设计", "url": "/posts/%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/", "categories": "日常学习, 量化", "tags": "量化, 数据密集系统设计", "date": "2022-07-25 22:34:00 +0800", "snippet": "因为一些实际的需要，读了下HFT system（高频交易系统）的相关内容，记录一下。回想自己最初的设计存在一些问题。记录下思考过程，需要的基础知识是order book是什么，交易所在干什么。因为这类知识我是通过请教他人得知，我就没法给出方便的链接了。关于交易系统构建的小问题参考文章building-a-trading-system-general-considerations如何构建ORDER BOOK最初我在思考构建order book的时候，只考虑了两点1.结构上还原order book（虽然是废话），order book一眼看上去，就像是个天然的数组，这样的思考惯性实在是太强烈了..." }, { "title": "go的相关学习-测试-依赖注入-日志", "url": "/posts/go%E7%9A%84%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0-%E6%B5%8B%E8%AF%95-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-%E6%97%A5%E5%BF%97/", "categories": "日常学习, go", "tags": "go", "date": "2022-07-25 22:34:00 +0800", "snippet": "之前写go，一直使用的就是原生的test，测试时则是直接虚拟环境启动。最近遇到了，无法使用虚拟环境，参数又非常多的情况，原生的test的支持就不够了。因此需要进行一些学习，记录以下。其实主要就是一些第三方包的使用。依赖注入 digdig官方链接 dig是uber开源的基于go语言的依赖注入框架,帮助开发者管理系统中对象的创建和维护，遵循设计模式的IOC原则。一般流程如下： 创建一个容器：dig.New 注册构造函数：为想要让dig容器管理的实例创建构造函数，构造函数可以有多个参数和多个返回值，这些参数是这些返回值的依赖，这些返回值都会被容器管理 使用这些实例：编写一个函数，将需要使..." }, { "title": "琐碎内容记录", "url": "/posts/%E7%90%90%E7%A2%8E%E7%9A%84%E5%86%85%E5%AE%B9%E8%AE%B0%E5%BD%95/", "categories": "日常学习, 日常", "tags": "杂项, 日常", "date": "2022-07-07 00:00:00 +0800", "snippet": "知识点：很杂总之，想着把平时遇到的琐碎知识点记录下python相关1.安装本地第三方包，使用pip install -e .linux相关1.linux下查看大文件的相关命令当需要查看大文件时，vim自然不能用了，以下是可以考虑考虑使用的命令 more 参考 more xxxx.xxx # 之后的交互命令参考上面链接 less linux下搜索文件 locate: loacte通过搜索一个已经建立的数据库来在系统中高速查找文件或目录，基本用法如下locate keyword # 查找keywordlocate -l 2 keyword ..." }, { "title": "2022年下半年加2023上半年刷题整理", "url": "/posts/2022%E5%B9%B4%E4%B8%8B%E5%8D%8A%E5%B9%B4%E5%8A%A02023%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/", "categories": "leetcode", "tags": "刷题", "date": "2022-07-01 00:00:00 +0800", "snippet": "git链接我的leetcode刷题记录我的leetcode刷题记录golangpython和go可能会混着写，估计go会用的越来越多了171.excel表序号题目链接1.主要就是注意，直接使用range对字符串遍历，和使用下标遍历，一次取的长度是不同的172.阶乘后的零题目链接1.典型的规律题，每一对2和5会产生一个0，只要算出有多少对2和5即可。但是尬算肯定不是最优解。且由于2的倍数出现一定多于5的倍数，因此，计算出5的个数即可。2.假设这个数为n，则n/5为5的倍数的个数，但是考虑到25这样的数的特殊性，多次除5，累加即可。179.最大数题目链接1.按字典序更靠前的数字放在更前面，规..." }, { "title": "堆排序算法实现", "url": "/posts/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/", "categories": "具体需求", "tags": "杂项, 具体需求", "date": "2022-05-01 00:00:00 +0800", "snippet": "知识点：堆排序代码链接之前一直没有手写过堆排序，今天完整了实现了堆排序类。并提供了pop(),push(),sort_all()三个功能跳过堆排序的概念，考虑类需要实现的方法，如下​ 1）堆的初始化​ 2）弹出堆顶元素​ 3）向堆中添加新元素​ 4）将整个堆排序返回对于这些功能，需要进行模块的进一步设计。所有功能都离不开一个基本的操作，即节点元素的位置交换，避免冗余，单独实现。1，3都需要对堆进行重整。因此独立实现一个整理堆的函数。由此函数模块划分如下,具体代码点击文章开头链接class HeapSort: # 将传入数组整理使得其符合堆 def __init__(self,..." }, { "title": "用python重新整理刷题记录", "url": "/posts/%E7%94%A8python%E9%87%8D%E6%96%B0%E6%95%B4%E7%90%86%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/", "categories": "具体需求", "tags": "杂项, 具体需求", "date": "2022-04-29 00:00:00 +0800", "snippet": "知识点：正则表达式，文件操作今天温习算法题的时候，发现自己的git仓库下，每一个题虽说代码写了注释，但是有部分思考内容是整合在一起放博客上的。搞得我想知道自己的一些思考，还得在博客上找到对应的记录。因此决定重新整理下仓库，每个代码目录下都新增一个problem.md用于存放当初记录的思考手动整理不可行考虑到： 我的仓库目录绝大部分是按照 号码_难度_题目名 来组织的 例如：4_difficult_median_of_two_sorted_arrays 博客对应的markdown文件是有对应的结构的因此，用python写了两个脚本完成了创建文件和拆分md到仓库的对应目录下代码很简单只是..." }, { "title": "设计模式", "url": "/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/", "categories": "系统学习, 设计模式", "tags": "设计模式, 系统学习", "date": "2022-04-07 00:00:00 +0800", "snippet": "git链接我的设计模式学习全记录，包含代码和注释面试被问到设计模式被问住了，痛定思痛。系统的彻底学一下软件设计七大原则 设计原则 简单定义 作用 开闭原则 对扩展开放，对修改关闭 降低维护带来的新风险 依赖倒置原则 高层不应该依赖低层，要面向接口编程 更利于代码结构的升级扩展 单一职责原则 一个类只干一件事，实现类要单一 便于理解，提高代码的可读性 接口隔离原则 一个..." }, { "title": "2022年上半年度刷题整理", "url": "/posts/2022%E5%B9%B4%E4%B8%8A%E5%8D%8A%E5%B9%B4%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/", "categories": "leetcode", "tags": "刷题", "date": "2022-01-01 00:00:00 +0800", "snippet": "git链接我的leetcode刷题记录TVT第一季度不知道忙的个啥，写的太少了给我冲166.分数到小数题目链接1.查了下判断除尽的条件，一个思路：先判断是否是循环小数，如果是，则进行循环到重复一次，就可以得到循环节了。这个思路就需要 1）判断：是否可以除尽 2）寻找循环节2.看了题解，我想多了，整数部分使用长除法解决，小数部分找循环节是核心。题解链接3.写的第一版本有问题，并不是所有小数部分都是循环节，我直接看是否循环，然后将所有的小数部分弄成了循环节。258.各位相加题目链接1.这题本身没难度，进阶要求不使用递归和循环一时没想到。一看答案是个数学方法。题解链接44.通配符匹配题目链接1..." }, { "title": "tensorflow", "url": "/posts/tensorflow%E5%AD%A6%E4%B9%A0/", "categories": "系统学习, 机器学习", "tags": "机器学习, 深度学习", "date": "2021-12-18 00:00:00 +0800", "snippet": "系统学习一下tensorflw，做一个记录线性回归假设我们得到一个数据集，对应一个f(x)=ax+b的一次函数。对于这个问题，首先应当定义一个损失函数(loss function)或者叫代价函数（cost function）。一般一次函数使用均方差（f（x）-y）^2 。实现的模板如下x=data.xy=data.ymodel=tf.keras.Sequential() # 先定义一个空模型model.add(tf.keras.layers.Dense(1,input_shape=(1,))) # 添加一个全连接层model.compile(optimizer=&#39;adam&#39..." }, { "title": "docker布置完整项目遇到的一些问题", "url": "/posts/docker%E5%B8%83%E7%BD%AE%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE/", "categories": "具体需求", "tags": "具体需求, docker", "date": "2021-11-07 00:00:00 +0800", "snippet": "最近两天需要把一个完整的项目布置到docker内，制作一个完整的镜像。项目主算法，前后端都有涉及，布置中遇到了不少问题。（1）一堆基础的docker命令，记录下。其中参数还有很多其它的，就记录这次用到的docker images # 查看imagges ，--no-trunc来显示详细docker ps # 查看运行中的容器，可以加上参数-a列出全部，-n +数字m列出最近m个docker run -itd --name XXXX(容器名) -p 88(主机):88(容器) # 参数还有很多docker cp /xxxx/ 123(容器id):/xxx/ #容器id部分可以用容器名其..." }, { "title": "2021年第四季度刷题整理", "url": "/posts/2021%E5%B9%B4%E7%AC%AC%E5%9B%9B%E5%AD%A3%E5%BA%A6%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/", "categories": "leetcode", "tags": "刷题", "date": "2021-10-01 00:00:00 +0800", "snippet": "git链接我的leetcode刷题记录91.解码方法题目链接1.直观的思路，递归加剪枝应该是没有问题的。2.递归加剪枝超时了，例如对于45个1这种，就会出现次数极多的尝试，思考了一下，这个应该使用动态规划来实现。3.一开始没考虑解码方案不存在的情况，错了很多次116.填充每个节点的下一个右侧节点题目链接1.上来的直接思路，层序遍历然后一直往右连，加个层级标记，同一级继续右连。2.可以逐级建立，利用上级留下的next，就可以实现题目要求的进阶125.验证回文串题目链接1.关键是解决如何匹配的问题，一个字符不考虑大小写这一问题，想到的是转为数字，注意，因为大小写字母之间插入了几个字符，因此差..." }, { "title": "elasticdump安装", "url": "/posts/elasticdump/", "categories": "日常学习, 日常", "tags": "日常, 日常", "date": "2021-08-20 00:00:00 +0800", "snippet": "Elasticseach目前作为查询搜索平台，一些导入导出不是很方便，可以借助elasticdump以ubuntu为例apt updateapt upgradeapt install nodejs npmnpm install elasticdump -g可是最后一步会报这种错，很难受npm uninstall -g angular-clinpm cache clear --force参考解决报错" }, { "title": "k8s和aws学习", "url": "/posts/k8s%E5%92%8Caws%E5%AD%A6%E4%B9%A0/", "categories": "系统学习, k8s学习", "tags": "k8s, 系统学习", "date": "2021-07-28 00:00:00 +0800", "snippet": "实习期间用到了k8s和aws，稍微记录一下K8s安装学习环境安装教程linux防止这教程啥时候就挂了，还是具体记录下。# 下载最新版的kubectlcurl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;# 下载校验curl -LO &quot;https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/am..." }, { "title": "go语言学习", "url": "/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/", "categories": "系统学习, go语言学习", "tags": "go, 系统学习", "date": "2021-07-20 00:00:01 +0800", "snippet": "长期记录更新go语言学习内容安装相关的网站:安装参考GO官网学习过程参考了《go语言编程》图书的豆瓣链接第四章 并发编程4.1并发基础就目前而言，并发包含几种主流的实现模型：多进程；多线程；基于回调的非阻塞/异步IO；协程。4.3 goroutine在一个函数调用前加上go关键字，这次调用就会在一个新的goroutine中并发执行。当被调用的函数返回时，这个goroutine也自动结束了。需要注意的是，如果这个函数有返回值，那么这个返回值会被丢弃。4.4并发通信Go语言提供的是另一种通信模型，即以消息机制而非共享内存作为通信方式。4.5 channelchannel是类型相关的。也就是说..." }, { "title": "go语言学习前三章", "url": "/posts/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%89%8D%E4%B8%89%E7%AB%A0/", "categories": "系统学习, go语言学习", "tags": "go, 系统学习", "date": "2021-07-20 00:00:00 +0800", "snippet": "长期记录更新go语言学习内容安装相关的网站:安装参考GO官网学习过程参考了《go语言编程》图书的豆瓣链接语言特性(挑其中有意思的记录)：函数多返回值。在静态语言中首先给出了多值返回功能defer，panic，recover用于标准错误处理匿名函数和闭包非侵入式接口goroutine进行并发编程，用channel实现了csp模型第一章1.不得包含源代码中没有用到的包2.匿名变量，可以通过_,_,nickName :=GetName()的形式，只获取函数多个返回值中的一个3.go语言常量是无类型的，它只要在相应类型的值域范围，就可以作为该类型的常量.第二章1.bool变量如果不赋值，默认为f..." }, { "title": "go实操学习", "url": "/posts/go%E5%AE%9E%E6%93%8D%E5%AD%A6%E4%B9%A0/", "categories": "具体需求, go实操学习", "tags": "go, 具体需求", "date": "2021-07-20 00:00:00 +0800", "snippet": "长期记录更新go实际遇到的问题和解决，分一个个记太特么费事了2021_07_23 安装依赖时遇到的坑原理还没理解，也许以后会明白的。就是把项目里的的config.yml.example的example后缀改了，然后影响了依赖包的正常安装，取消了问题就解决了。2021_07_23 go没有集合的解决方法go的map是个hash表，将查表内容对应的改为void即可变成集合,如下的示例type emptyElement struct{}var emptyMember emptyElementparentSet := make(map[string]emptyElement)2021_07_26..." }, { "title": "mysql8.0安装的几个小问题", "url": "/posts/mysql%E6%96%B0%E7%89%88%E5%AE%89%E8%A3%85%E7%9A%84%E9%97%AE%E9%A2%98/", "categories": "杂项", "tags": "杂项, 数据库", "date": "2021-07-05 00:00:00 +0800", "snippet": "今天在自己的阿里云服务器上安装了mysql，装的最新版本，有些操作有细微的变化（1）关于如何删除全部依赖项并清除设置.一个很典型的，如果不加–purge参数，所有设置都会保留，比如apt-get --purge autoremove mysql-server（2）mysql5.7之后，mysql数据库下user表里没有password字段了,改成了authentication_string，修改密码命令如下ALTER USER &#39;a&#39;@&#39;localhost&#39; IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY &#39;xxx..." }, { "title": "问题解决集锦", "url": "/posts/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E9%9B%86%E9%94%A6/", "categories": "具体需求", "tags": "杂项", "date": "2021-07-01 00:00:00 +0800", "snippet": "有时会遇到一些问题，费时费力不是因为技术难度，因为思维定势或者细节疏忽，记录一下同时把一些反思记录下来2023_02_03 滑动窗口大小加数据局部乱序本地对比两个极大的文件，都是时序文件，a文件比b文件内容多。对比思路最初是对a逐个读出，利用b的内容构建set。但是发现一个问题，就是a，b里有时会有重复数据，使用集合会导致重复数据只加入集合又删除一次，当重复的数据再次查询时就被认为不存在，引起错误。进而更新为使用list。a逐个读出，b滑动窗口。解决了问题。但是在更换了数据后，新的数据虽然模式相同，但是b相对于a，不止缺数据，还存在局部的乱序。需要滑动窗口足够大来解决。同时数据不一致的问..." }, { "title": "弱智集锦", "url": "/posts/%E5%BC%B1%E6%99%BA%E9%9B%86%E9%94%A6/", "categories": "具体需求", "tags": "杂项", "date": "2021-07-01 00:00:00 +0800", "snippet": "有时会在debug时遇到一些低级错误，浪费大量时间，记录一下把弱智集锦置顶了，警示下自己2021_08_25 代码版本问题本地测试a代码，发现一些问题，不过因为a调用b。于是把b下载到本地，怎么看都不对。最后发现是实际部署的b是一个月前的版本，我看的是最新分支。找问题找的头晕眼花2021_08_20 集群配置出错需要从集群上下载文件，怎么都下载不下来。考虑了密码文件格式问题等等，结果是k8s配错集群了。荒唐2021_08_11 报错一个功能为检查子集关系的函数报错了。我对着检查到天荒地老，都没发现错误，结果是这个函数的并非直接检查的部分出错，而是获取数据时出错，只不过都报的检查失败。一直..." }, { "title": "2021年第三季度刷题整理", "url": "/posts/2021%E5%B9%B4%E7%A7%8B%E5%AD%A3%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%86/", "categories": "leetcode", "tags": "刷题", "date": "2021-06-30 00:00:00 +0800", "snippet": "6月一整个月忙东忙西没咋写代码，手又有点生了==碎碎念一下，还是得保持自律啊TvTgit链接我的leetcode刷题记录279.完全平方数题目链接1.一个关键问题既是如何减少尝试次数，上来就想到的是，从大的开始试。然后在函数内部写一个递归，同时要维护一个最多尝试次数用于及时剪枝。最后实现效果还是比较好的2.看了题解，数学法不说了，还有动态规划法。动态规划法值得学一下动态规划的官方题解3.动态规划法效率远差于暴力加剪枝，实际上，剪枝法避免了大量不必要的尝试，而动态规划法还是遍历了所有的情况136.只出现一次的数字题目链接1.题目要求线性复杂度，最好不使用额外空间。线性复杂度不难，可上集合，..." }, { "title": "何为ci_cd", "url": "/posts/%E4%BD%95%E4%B8%BAci_cd/", "categories": "日常学习, 日常", "tags": "日常", "date": "2021-06-29 22:34:00 +0800", "snippet": "记录几个链接gitlab的ci/cdjenkins教程" }, { "title": "python的几个问题", "url": "/posts/python%E5%87%A0%E4%B8%AA%E9%9D%A2%E8%AF%95%E9%A2%98/", "categories": "日常学习, python", "tags": "python", "date": "2021-06-29 22:34:00 +0800", "snippet": "面试中问了些python的基本问题，发现时间久远加之学习中也没太注意这些理论上的细节，答得不行。学习并记录下python的闭包直接看链接里的文章，文章总结的已经很好。尤其注意典型问题（文章里都有具体的例子）：1.闭包陷阱：返回闭包前，闭包中父函数可能发生意料外变化。因此返回闭包中不要引用任何循环变量或者后续会发生变化的变量2.经过装饰器装饰的函数或者类不再是原来的函数或者类了。这也是使用装饰器改变函数或者类的行为与直接修改定义最根本的差别。理解pytho闭包概念在前一链接学习中，对于示例代码如图,一开始产生了疑惑为什么可以这样返回呢？总结就是，这样相当于函数通过函数名返回了对一个函数对象..." }, { "title": "shell交互和php", "url": "/posts/shell%E4%BA%A4%E4%BA%92%E5%92%8Cphp/", "categories": "具体需求", "tags": "数据库, 具体需求", "date": "2021-06-22 00:00:00 +0800", "snippet": "接昨天的情况，因为是陈年老脚本，所以在新分的服务器上搭不出来。问学长也没弄出个所以然，可能是之后的更新导致的细节问题，但是目前任务要紧，先在已经放了python项目且能跑通的老服务器上搭后端环境并做一个配套。php下载并安装下载链接chmod +x xampp-..../xampp-.../opt/lampp/lampp start进行一些基本的配置增加端口和目录的对应，不使用默认目录，不然一更新什么都没了。修改/opt/lampp/etc下的配置文件即可，注意不显示目录，和限制文件下载。处于安全，不然网站容易被打成筛子&amp;lt;FilesMatch &quot;\\.(sh|jso..." }, { "title": "python脚本布置到服务器", "url": "/posts/python%E8%84%9A%E6%9C%AC%E5%B8%83%E7%BD%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/", "categories": "具体需求", "tags": "数据库, 具体需求", "date": "2021-06-21 00:00:00 +0800", "snippet": "今天在项目开发中，需要把一个python脚本融入进后端。这个脚本只能在特定的python版本和对应的包下才能跑对，记录一下学习过程创建对应的环境需要python3.5和对应的包，因此使用conda命令先安装一个3.5版本的pythonconda create --name python35 python=3.5查看是否创建成功conda info --env创建副本为了防止乱七八糟的包污染了环境，用virtualenvvirtualenv -p /data/anaconda3/envs/python35/bin/python ./envextractsource ./envextrac..." }, { "title": "计算机网络", "url": "/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/", "categories": "计算机基础, 计网", "tags": "计算机基础", "date": "2021-06-13 15:15:00 +0800", "snippet": "写在前面基础课好长时间不看，就又忘了。面试的时候想不起来==再过一遍，写个笔记强化记忆。笔记问题导向，针对面试总结而不是对于系统学习的详细记录了。OSI七层模型，TCP/IP四层osi七层模型高三层主要负责数据处理，是资源子网。低三层负责数据通信，是通信子网。上面4层端到端，下面3层点到点1）应用层：这层的特点是和用户交互，典型的有FTP，SMTP，HTTP2）表示层：定义语法和语义。包括数据格式变换，数据加解密，数据压缩和恢复（JPEG，ASCII）3）会话层：建立连接（也就是建立会话）。具体为建立，管理，终止会话，使用校验点从而使会话再通信失效时从校验点、同步点恢复通信。有ADSP，..." }, { "title": "pytorch深度学习", "url": "/posts/pytorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/", "categories": "系统学习, 机器学习", "tags": "机器学习, 深度学习", "date": "2021-05-09 00:00:00 +0800", "snippet": "安装相关的网站：anaconda下载cuda下载" }, { "title": "五月份刷题记录", "url": "/posts/5%E6%9C%88%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/", "categories": "leetcode", "tags": "刷题", "date": "2021-04-27 00:03:00 +0800", "snippet": "git链接我的leetcode刷题记录958.二叉树的完全性检验题目链接（1）直接的思路是。利用层序遍历，并对节点编号，子节点编号为父节点的两倍或者两倍加一（对应左右节点），遍历结束后看是否是不断数字的单增序列即可，最后的判断不用遍历，因为是主动编的号，只要看最后一个数等于长度与否即可。(2)一看答案思路一样的，答案写法更简洁。不过没什么差92.反转链表2题目链接（1）总共需要找到4个节点，left的前节点，left，right的后节点，right，但是存在前后节点不存在的情况。（2）对于1中的情况，left无前节点添加一个新的头即可使得统一处理方式，而right后节点不存在不影响处理（..." }, { "title": "leetcode刷题整理第二部分", "url": "/posts/leetcode%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%862/", "categories": "leetcode", "tags": "刷题", "date": "2021-04-26 20:03:00 +0800", "snippet": "把之前的刷题内容和笔记整理一波,后半部分git链接我的leetcode刷题记录503.下一个最大值2503.下一个最大值2（1）单调栈用法介绍文章297.二叉树的序列化和反序列化297.二叉树的序列化和反序列化（1）参考链接（2）层序遍历162.寻找峰值162.寻找峰值（1）二分查找变形221.最大正方形221.最大正方形（1）动态规划，一个格子和左，上，左上三个格子有关128.最长连续序列128.最长连续序列（1）借助集合，其实很简单560.和为K的数组560.和为k的数组（1）借助集合，其实很简单（2）collections模块的defaultdict可以用于计数，可以方便的实现前缀..." }, { "title": "leetcode刷题整理第一部分", "url": "/posts/leetcode%E5%88%B7%E9%A2%98%E6%95%B4%E7%90%861/", "categories": "leetcode", "tags": "刷题", "date": "2021-04-26 16:33:00 +0800", "snippet": "把之前的刷题内容和笔记整理一波,前半部分git链接我的leetcode刷题记录20.有效括号：有效括号（1）使用list构造栈时进行了测试，空列表是不可以取值的，会报越界（2）list可以直接用下标修改内容，可以很方便的做成栈，不需要栈元素大小统一21.合并两个有序链表:合并两个有序链表（1）实现了c语言的版本26.移除有序链表里的重复元素移除有序链表里的重复元素（1）类似len(xx)这样的，如果写在条件里，每次都会计算从而变慢（2）这题一开始实现的解法写出了不必要的条件判断语句，写了4个版本。无意间发现for循环慢一些。查资料证实了这一点，但是当迭代对象已经存在时则是for快一点。参..." }, { "title": "统计数据库更新情况", "url": "/posts/%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9B%B4%E6%96%B0%E6%83%85%E5%86%B5/", "categories": "具体需求, 数据库", "tags": "数据库, 具体需求", "date": "2021-04-25 14:36:00 +0800", "snippet": "今天需要统计数据库的修改情况，就是统计已经修改数量/总数。每个数据表都有一个标志位用于修改，直接写个sql查某个表的修改是很容易的。但是为节省之后的精力，最后研究后最终实现为将统计结果写入数据库存储。这样以后需要查就可以直接调用过程解决。查询数据数量这个十分简单，利用count()解决SELECT COUNT(DISTINCT id) as `marked` FROM subrel_1 WHERE judge_submit = 1 ;使用select将结果放在一行为了让结果看起来比较舒服，自然是希望能在同一行中显示结果，可以用下面这种方法达到print的效果。set marked = ..." }, { "title": "更新mysql下所有表", "url": "/posts/mysql%E6%9B%B4%E6%96%B0%E6%9F%90%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8B%E6%89%80%E6%9C%89%E8%A1%A8/", "categories": "具体需求, 数据库", "tags": "mysql, 具体需求", "date": "2021-04-14 00:00:00 +0800", "snippet": "今天在项目开发中，发现了一个小问题，使得需要修改某个数据库下所有表的某个字段。虽然实际上手动修改也很快，但是决定学习并实现一下利用一个过程在mysql下实现。查询某个数据库表下的所有的表名首先肯定需要一个子查询，获得全部的表名，之后作为游标使用。格式如下。information_schema.tables存储了mysql种的全部表信息，我们只需要查询表名即可,DB_name是数据库名select table_name from information_schema.tables where table_schema= DB_name ;使用conact连接生成sql语句tables_cu..." }, { "title": "mysql面试题总结", "url": "/posts/mysql%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/", "categories": "系统学习, 数据库学习", "tags": "mysql", "date": "2021-04-13 18:51:00 +0800", "snippet": "事务的基本特性和隔离级别（1）基本特性ACID如下： 原子性（Atomicity）:一个事务中的操作要么全部成功要么全部失败 一致性（Consistency）：事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。 隔离性（Isolation）：事务提交前对其他事务不可见 持久性（Durability）：一旦事务提交，所做的修改就会永久保存到数据库中 （2）四个隔离级别： 读未提交（read uncommitted）：可能会读到其它事务未提交的数据，也叫脏读 读已提交（read committed）：两次读取结果..." }, { "title": "explain的参数解析", "url": "/posts/explain/", "categories": "系统学习, 数据库学习", "tags": "mysql", "date": "2021-04-13 18:51:00 +0800", "snippet": "参数意义（1）id:查询的顺序号，一个句子包含多个查询时会有。id顺序列越大越先执行，相同则从上往下，NULL最后执行（2）select_type:表示select子句的类型，具体如下 SIMPLE：不包含子查询或者UNION查询 PRIMARY：此查询为最外层查询（包含子查询） SUBQUERY：子查询中的第一个SELECT UNION：是UNION中的第二或者随后的查询 DEPENDENT UNION：是UNION中的第二或者随后的查询，取决于外面的查询 UNION RESULT DEPEN..." }, { "title": "数据库学习bufferpool相关", "url": "/posts/mysql%E5%AD%A6%E4%B9%A0bufferpool/", "categories": "系统学习, 数据库学习", "tags": "数据库", "date": "2021-04-09 22:34:00 +0800", "snippet": "BufferPool（1）空间管理：当执行一条 sql语句时，在定位到一个页后，会把页复制到buffer pool里。一个页在放入buffer pool时，由于buffer pool里的空间可能不是连续的，innodb是这样处理的。维持一个free链表，每个节点都指向一个空白页，取第一个节点。同样的，当buffer pool里出现新的空闲时，会再添加到free链表的尾部。（2）脏页管理：维护一个flush链表，和free的思路类似。具体的update实现利用redo log实现（3）页面淘汰算法：LRU链表实现。不过这种普通的应用淘汰算法存在一个困境，假设进行了一次全表扫描，会出现不停取..." }, { "title": "mysql索引学习", "url": "/posts/mysql%E5%AD%A6%E4%B9%A0%E7%B4%A2%E5%BC%95/", "categories": "系统学习, 数据库学习", "tags": "mysql", "date": "2021-04-07 19:34:00 +0800", "snippet": "数据库常用索引类型及优缺点（1）hash表：hash。 优点：查找复杂度o（1） 缺点：冲突，只能支持=和in操作，不支持范围查找（主要原因） （2）二叉树及平衡二叉树红黑树：非常经典的索引数据结构，可以使用二分法进行查找，时间复杂度O(logn).但二叉树存在致命的缺陷，如下： 二叉树可能因为操作的原因退化为链表，例如插入一组有序数据生成的二叉树 如果为了应对上一条的问题引入平衡二叉树或者红黑树。这两个数据结构对比，红黑树是追求大致平衡的，从根到叶子节点的最长路径不多于最短路径的两倍，因此比平衡二叉树维护平衡的难度低。但是这两个数据结构..." }, { "title": "欢迎来到我的博客", "url": "/posts/%E6%AC%A2%E8%BF%8E/", "categories": "杂项", "tags": "杂项", "date": "2021-04-05 20:55:00 +0800", "snippet": "记录学习过程如有疑问邮箱联系。此外简要说明下分类日常学习记录遇到问题后进行的学习具体需求记录遇到的经过学习解决的需求或是突发奇想写的一些实际代码的过程系统学习对应着某大类知识，成体系的学习过程计算机基础也算是系统学习，但是更多是记录下计网，linux这类公共基础的学习leetcode就记录下刷题，感兴趣配合看我的git，注释很详细还会记录遇到的问题" }, { "title": "博客搭建", "url": "/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/", "categories": "杂项", "tags": "杂项", "date": "2021-04-05 17:34:00 +0800", "snippet": "经过半天的折腾，终于把博客布在服务器上了。今天踩得坑主要有以下几个：（1）阿里云服务器的控制台安全策略独立于主机的安全策略，导致在云服务器上配了很久还是没法正常访问（2）查到理论上上的nginx的目录为以下四个 /usr/sbin/nginx：主程序 /etc/nginx：存放配置文件 /usr/share/nginx：存放静态文件 /var/log/nginx：存放日志实际上根据第三个没有用，根据配置文件的信息，实际上默认代码在/var/www（3）网页加载极慢，一开始在看是不是没缓存和Gzip的问题，实际上是css样式导入了外网内容，导致极慢，全部下载下来本地布置即可（4）配..." }, { "title": "前端的一些零碎尝试", "url": "/posts/%E5%89%8D%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%B6%E7%A2%8E%E5%B8%B8%E8%AF%86/", "categories": "具体需求", "tags": "前端, 具体需求", "date": "2021-04-02 00:00:00 +0800", "snippet": "因为一些实际的需求，需要开发一个简单的小系统。很长时间没有做相关的工作了，尤其是前端，记录一下安装对应的环境因为计划在写本博客时，计划是使用vue-element-ui+python来实现。首先要做前端界面的搭建。参考了以下的几篇使用vue-cli搭建本地Vue项目Element-ui安装与使用node相关的版本控制" } ]
